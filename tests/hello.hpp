// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HELLO_SKYMARLIN_NET_TESTS_H_
#define FLATBUFFERS_GENERATED_HELLO_SKYMARLIN_NET_TESTS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace skymarlin {
namespace net {
namespace tests {

struct Hello;
struct HelloBuilder;

struct Hello FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HelloBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HELLO = 4
  };
  const ::flatbuffers::String *hello() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HELLO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HELLO) &&
           verifier.VerifyString(hello()) &&
           verifier.EndTable();
  }
};

struct HelloBuilder {
  typedef Hello Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_hello(::flatbuffers::Offset<::flatbuffers::String> hello) {
    fbb_.AddOffset(Hello::VT_HELLO, hello);
  }
  explicit HelloBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Hello> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Hello>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Hello> CreateHello(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> hello = 0) {
  HelloBuilder builder_(_fbb);
  builder_.add_hello(hello);
  return builder_.Finish();
}

struct Hello::Traits {
  using type = Hello;
  static auto constexpr Create = CreateHello;
};

inline ::flatbuffers::Offset<Hello> CreateHelloDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *hello = nullptr) {
  auto hello__ = hello ? _fbb.CreateString(hello) : 0;
  return skymarlin::net::tests::CreateHello(
      _fbb,
      hello__);
}

inline const skymarlin::net::tests::Hello *GetHello(const void *buf) {
  return ::flatbuffers::GetRoot<skymarlin::net::tests::Hello>(buf);
}

inline const skymarlin::net::tests::Hello *GetSizePrefixedHello(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<skymarlin::net::tests::Hello>(buf);
}

inline bool VerifyHelloBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<skymarlin::net::tests::Hello>(nullptr);
}

inline bool VerifySizePrefixedHelloBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<skymarlin::net::tests::Hello>(nullptr);
}

inline void FinishHelloBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<skymarlin::net::tests::Hello> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHelloBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<skymarlin::net::tests::Hello> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace tests
}  // namespace net
}  // namespace skymarlin

#endif  // FLATBUFFERS_GENERATED_HELLO_SKYMARLIN_NET_TESTS_H_
