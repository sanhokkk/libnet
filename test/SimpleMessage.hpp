// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLEMESSAGE_SKYMARLIN_NET_TEST_H_
#define FLATBUFFERS_GENERATED_SIMPLEMESSAGE_SKYMARLIN_NET_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace skymarlin {
namespace net {
namespace test {

struct SimpleMessage;
struct SimpleMessageBuilder;

struct SimpleMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SimpleMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PASSWORD = 4
  };
  uint32_t password() const {
    return GetField<uint32_t>(VT_PASSWORD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PASSWORD, 4) &&
           verifier.EndTable();
  }
};

struct SimpleMessageBuilder {
  typedef SimpleMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_password(uint32_t password) {
    fbb_.AddElement<uint32_t>(SimpleMessage::VT_PASSWORD, password, 0);
  }
  explicit SimpleMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SimpleMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SimpleMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SimpleMessage> CreateSimpleMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t password = 0) {
  SimpleMessageBuilder builder_(_fbb);
  builder_.add_password(password);
  return builder_.Finish();
}

inline const skymarlin::net::test::SimpleMessage *GetSimpleMessage(const void *buf) {
  return ::flatbuffers::GetRoot<skymarlin::net::test::SimpleMessage>(buf);
}

inline const skymarlin::net::test::SimpleMessage *GetSizePrefixedSimpleMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<skymarlin::net::test::SimpleMessage>(buf);
}

inline bool VerifySimpleMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<skymarlin::net::test::SimpleMessage>(nullptr);
}

inline bool VerifySizePrefixedSimpleMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<skymarlin::net::test::SimpleMessage>(nullptr);
}

inline void FinishSimpleMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<skymarlin::net::test::SimpleMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSimpleMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<skymarlin::net::test::SimpleMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace test
}  // namespace net
}  // namespace skymarlin

#endif  // FLATBUFFERS_GENERATED_SIMPLEMESSAGE_SKYMARLIN_NET_TEST_H_
