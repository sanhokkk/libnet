// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserRegistration.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserRegistration_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_UserRegistration_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_UserRegistration_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_UserRegistration_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_UserRegistration_2eproto;
namespace skymarlin {
namespace protocol {
namespace auth {
class UserRegistration;
struct UserRegistrationDefaultTypeInternal;
extern UserRegistrationDefaultTypeInternal _UserRegistration_default_instance_;
class UserRegistrationResult;
struct UserRegistrationResultDefaultTypeInternal;
extern UserRegistrationResultDefaultTypeInternal _UserRegistrationResult_default_instance_;
}  // namespace auth
}  // namespace protocol
}  // namespace skymarlin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace skymarlin {
namespace protocol {
namespace auth {
enum UserRegistrationResult_Result : int {
  UserRegistrationResult_Result_EmailInvalidFormat = 0,
  UserRegistrationResult_Result_EmailAlreadyRegistered = 1,
  UserRegistrationResult_Result_PasswordInvalid = 2,
  UserRegistrationResult_Result_UserRegistrationResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserRegistrationResult_Result_UserRegistrationResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserRegistrationResult_Result_IsValid(int value);
extern const uint32_t UserRegistrationResult_Result_internal_data_[];
constexpr UserRegistrationResult_Result UserRegistrationResult_Result_Result_MIN = static_cast<UserRegistrationResult_Result>(0);
constexpr UserRegistrationResult_Result UserRegistrationResult_Result_Result_MAX = static_cast<UserRegistrationResult_Result>(2);
constexpr int UserRegistrationResult_Result_Result_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
UserRegistrationResult_Result_descriptor();
template <typename T>
const std::string& UserRegistrationResult_Result_Name(T value) {
  static_assert(std::is_same<T, UserRegistrationResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return UserRegistrationResult_Result_Name(static_cast<UserRegistrationResult_Result>(value));
}
template <>
inline const std::string& UserRegistrationResult_Result_Name(UserRegistrationResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UserRegistrationResult_Result_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool UserRegistrationResult_Result_Parse(absl::string_view name, UserRegistrationResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserRegistrationResult_Result>(
      UserRegistrationResult_Result_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserRegistrationResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skymarlin.protocol.auth.UserRegistrationResult) */ {
 public:
  inline UserRegistrationResult() : UserRegistrationResult(nullptr) {}
  ~UserRegistrationResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserRegistrationResult(::google::protobuf::internal::ConstantInitialized);

  inline UserRegistrationResult(const UserRegistrationResult& from)
      : UserRegistrationResult(nullptr, from) {}
  UserRegistrationResult(UserRegistrationResult&& from) noexcept
    : UserRegistrationResult() {
    *this = ::std::move(from);
  }

  inline UserRegistrationResult& operator=(const UserRegistrationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegistrationResult& operator=(UserRegistrationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegistrationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegistrationResult* internal_default_instance() {
    return reinterpret_cast<const UserRegistrationResult*>(
               &_UserRegistrationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegistrationResult& a, UserRegistrationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegistrationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegistrationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegistrationResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegistrationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserRegistrationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserRegistrationResult& from) {
    UserRegistrationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserRegistrationResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "skymarlin.protocol.auth.UserRegistrationResult";
  }
  protected:
  explicit UserRegistrationResult(::google::protobuf::Arena* arena);
  UserRegistrationResult(::google::protobuf::Arena* arena, const UserRegistrationResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = UserRegistrationResult_Result;
  static constexpr Result EmailInvalidFormat = UserRegistrationResult_Result_EmailInvalidFormat;
  static constexpr Result EmailAlreadyRegistered = UserRegistrationResult_Result_EmailAlreadyRegistered;
  static constexpr Result PasswordInvalid = UserRegistrationResult_Result_PasswordInvalid;
  static inline bool Result_IsValid(int value) {
    return UserRegistrationResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = UserRegistrationResult_Result_Result_MIN;
  static constexpr Result Result_MAX = UserRegistrationResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = UserRegistrationResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return UserRegistrationResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return UserRegistrationResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return UserRegistrationResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .skymarlin.protocol.auth.UserRegistrationResult.Result result = 1;
  void clear_result() ;
  ::skymarlin::protocol::auth::UserRegistrationResult_Result result() const;
  void set_result(::skymarlin::protocol::auth::UserRegistrationResult_Result value);

  private:
  ::skymarlin::protocol::auth::UserRegistrationResult_Result _internal_result() const;
  void _internal_set_result(::skymarlin::protocol::auth::UserRegistrationResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:skymarlin.protocol.auth.UserRegistrationResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserRegistration_2eproto;
};// -------------------------------------------------------------------

class UserRegistration final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skymarlin.protocol.auth.UserRegistration) */ {
 public:
  inline UserRegistration() : UserRegistration(nullptr) {}
  ~UserRegistration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserRegistration(::google::protobuf::internal::ConstantInitialized);

  inline UserRegistration(const UserRegistration& from)
      : UserRegistration(nullptr, from) {}
  UserRegistration(UserRegistration&& from) noexcept
    : UserRegistration() {
    *this = ::std::move(from);
  }

  inline UserRegistration& operator=(const UserRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegistration& operator=(UserRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegistration* internal_default_instance() {
    return reinterpret_cast<const UserRegistration*>(
               &_UserRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRegistration& a, UserRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegistration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegistration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegistration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegistration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserRegistration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserRegistration& from) {
    UserRegistration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserRegistration* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "skymarlin.protocol.auth.UserRegistration";
  }
  protected:
  explicit UserRegistration(::google::protobuf::Arena* arena);
  UserRegistration(::google::protobuf::Arena* arena, const UserRegistration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserPwFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string user_pw = 2;
  void clear_user_pw() ;
  const std::string& user_pw() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_pw(Arg_&& arg, Args_... args);
  std::string* mutable_user_pw();
  PROTOBUF_NODISCARD std::string* release_user_pw();
  void set_allocated_user_pw(std::string* value);

  private:
  const std::string& _internal_user_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_pw(
      const std::string& value);
  std::string* _internal_mutable_user_pw();

  public:
  // @@protoc_insertion_point(class_scope:skymarlin.protocol.auth.UserRegistration)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr user_pw_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserRegistration_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserRegistration

// string user_id = 1;
inline void UserRegistration::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserRegistration::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:skymarlin.protocol.auth.UserRegistration.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRegistration::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:skymarlin.protocol.auth.UserRegistration.user_id)
}
inline std::string* UserRegistration::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:skymarlin.protocol.auth.UserRegistration.user_id)
  return _s;
}
inline const std::string& UserRegistration::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void UserRegistration::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserRegistration::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserRegistration::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:skymarlin.protocol.auth.UserRegistration.user_id)
  return _impl_.user_id_.Release();
}
inline void UserRegistration::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skymarlin.protocol.auth.UserRegistration.user_id)
}

// string user_pw = 2;
inline void UserRegistration::clear_user_pw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_pw_.ClearToEmpty();
}
inline const std::string& UserRegistration::user_pw() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:skymarlin.protocol.auth.UserRegistration.user_pw)
  return _internal_user_pw();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRegistration::set_user_pw(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_pw_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:skymarlin.protocol.auth.UserRegistration.user_pw)
}
inline std::string* UserRegistration::mutable_user_pw() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_pw();
  // @@protoc_insertion_point(field_mutable:skymarlin.protocol.auth.UserRegistration.user_pw)
  return _s;
}
inline const std::string& UserRegistration::_internal_user_pw() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_pw_.Get();
}
inline void UserRegistration::_internal_set_user_pw(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_pw_.Set(value, GetArena());
}
inline std::string* UserRegistration::_internal_mutable_user_pw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_pw_.Mutable( GetArena());
}
inline std::string* UserRegistration::release_user_pw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:skymarlin.protocol.auth.UserRegistration.user_pw)
  return _impl_.user_pw_.Release();
}
inline void UserRegistration::set_allocated_user_pw(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_pw_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_pw_.IsDefault()) {
          _impl_.user_pw_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skymarlin.protocol.auth.UserRegistration.user_pw)
}

// -------------------------------------------------------------------

// UserRegistrationResult

// .skymarlin.protocol.auth.UserRegistrationResult.Result result = 1;
inline void UserRegistrationResult::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = 0;
}
inline ::skymarlin::protocol::auth::UserRegistrationResult_Result UserRegistrationResult::result() const {
  // @@protoc_insertion_point(field_get:skymarlin.protocol.auth.UserRegistrationResult.result)
  return _internal_result();
}
inline void UserRegistrationResult::set_result(::skymarlin::protocol::auth::UserRegistrationResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:skymarlin.protocol.auth.UserRegistrationResult.result)
}
inline ::skymarlin::protocol::auth::UserRegistrationResult_Result UserRegistrationResult::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::skymarlin::protocol::auth::UserRegistrationResult_Result>(_impl_.result_);
}
inline void UserRegistrationResult::_internal_set_result(::skymarlin::protocol::auth::UserRegistrationResult_Result value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace protocol
}  // namespace skymarlin


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::skymarlin::protocol::auth::UserRegistrationResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::skymarlin::protocol::auth::UserRegistrationResult_Result>() {
  return ::skymarlin::protocol::auth::UserRegistrationResult_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_UserRegistration_2eproto_2epb_2eh
